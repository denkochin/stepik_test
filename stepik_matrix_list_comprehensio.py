b = []
a = None

a = input().split()
b.insert(0, a)
print(b)

a = input().split()
b.insert(1, a)
print(b)

a = input().split()
b.insert(2, a)
print(b)

c = []
##  это представление матрицы 3*3 с положительными индексами
c[0][0] = int(b[0][1]) + int(b[1][0]) + int(b[0][2]) + int(b[2][0])
c[0][1] = int(b[0][2]) + int(b[1][1]) + int(b[0][0]) + int(b[2][1])
c[0][2] = int(b[0][0]) + int(b[1][2]) + int(b[0][1]) + int(b[2][2])
c[1][0] = int(b[1][1]) + int(b[2][0]) + int(b[0][2]) + int(b[0][0])
c[1][1] = int(b[1][2]) + int(b[2][1]) + int(b[1][0]) + int(b[0][1])
c[1][2] = int(b[1][0]) + int(b[2][2]) + int(b[1][1]) + int(b[0][2])
c[2][0] = int(b[2][1]) + int(b[0][0]) + int(b[2][2]) + int(b[1][0])
c[2][1] = int(b[2][2]) + int(b[0][1]) + int(b[2][2]) + int(b[1][1])
c[2][2] = int(b[2][0]) + int(b[1][2]) + int(b[0][1]) + int(b[2][2])

if i == 0 and j == 0:               int(b[0][+1]) + int(b[+1][0]) + int(b[0][+2]) + int(b[+2][0])
if i == 0 and j == len(column) - 1: int(b[0][-2]) + int(b[+1][0]) + int(b[0][-1]) + int(b[+2][0])
if i == len(row) - 1 and j == 0:    int(b[0][+1]) + int(b[-2][0]) + int(b[0][+2]) + int(b[-1][0])
if i == len(row) - 1 and j == len(column) - 1: int(b[0][-2]) + int(b[-2][0]) + int(b[0][-1]) + int(b[-1][0])





##  ниже представление матрицы 3*3 с отрицательными индексами
c[-3][-3] = int(b[-3][-2]) + int(b[-2][-3]) + int(b[-3][-1]) + int(b[-1][-3])
c[-3][-2] = int(b[-3][-1]) + int(b[-2][-2]) + int(b[-3][-3]) + int(b[-1][-2])
c[-3][-1] = int(b[-3][-3]) + int(b[-2][-1]) + int(b[-3][-2]) + int(b[-1][-1])
c[-2][-3] = int(b[-2][-2]) + int(b[-1][-3]) + int(b[-3][-1]) + int(b[-3][-3])
c[-2][-2] = int(b[-2][-1]) + int(b[-1][-2]) + int(b[-2][-3]) + int(b[-3][-2])
c[-2][-1] = int(b[-2][-3]) + int(b[-1][-1]) + int(b[-2][-2]) + int(b[-3][-1])
c[-1][-3] = int(b[-1][-2]) + int(b[-3][-3]) + int(b[-1][-1]) + int(b[-2][-3])
c[-1][-2] = int(b[-1][-1]) + int(b[-3][-2]) + int(b[-1][-3]) + int(b[-2][-2])
c[-1][-1] = int(b[-1][-3]) + int(b[-3][-1]) + int(b[-1][-2]) + int(b[-2][-1])
## index changese below
c[-3][-3] = int(b[0][+1]) + int(b[+1][0]) + int(b[0][+2]) + int(b[+2][0])
c[-3][-2] = int(b[0][+1]) + int(b[+1][0]) + int(b[0][-1]) + int(b[+2][0])
c[-3][-1] = int(b[0][-2]) + int(b[+1][0]) + int(b[0][-1]) + int(b[+2][0])
c[-2][-3] = int(b[0][+1]) + int(b[+1][0]) + int(b[0][+2]) + int(b[-1][0])
c[-2][-2] = int(b[0][+1]) + int(b[+1][0]) + int(b[0][-1]) + int(b[-1][0])
c[-2][-1] = int(b[0][-2]) + int(b[+1][0]) + int(b[0][-1]) + int(b[-1][0])
c[-1][-3] = int(b[0][+1]) + int(b[-2][0]) + int(b[0][+2]) + int(b[-1][0])
c[-1][-2] = int(b[0][+1]) + int(b[-2][0]) + int(b[0][-1]) + int(b[-1][0])
c[-1][-1] = int(b[0][-2]) + int(b[-2][0]) + int(b[0][-1]) + int(b[-1][0])
print(c)
print(b)

##  нужно вычислить паттерн, с помощью которого создать цикл, который сможет
##  перебирать матрицы любого размера
